name: Building

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release           # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  OptiX_INSTALL_DIR: ${{github.workspace}}/optix

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      
    - name: Cache optix include
      uses: actions/cache@v3
      with:
        path: optix
        key: optix7

    - name: Download optix include
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_KEY }}
        repository: cuteday/optix-headers
        path: optix
      
    - name: Install OpenGL
      run: sudo apt-get install -y --no-install-recommends libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libgl1-mesa-dev
    
    - name: Install cuda-toolkit
      uses: Jimver/cuda-toolkit@v0.2.5
      with:
        # Cuda version
        cuda: "11.5.1"
        # Only installs specified subpackages, must be in the form of a JSON array. For example, if you only want to install nvcc and visual studio integration: ["nvcc", "visual_studio_integration"] double quotes required! Note that if you want to use this on Linux, 'network' method MUST be used.
        sub-packages: "[]"
        # Installation method, can be either 'local' or 'network'. 'local' downloads the entire installer with all packages and runs that (you can still only install certain packages with sub-packages on Windows). 'network' downloads a smaller executable which only downloads necessary packages which you can define in subPackages
        method: "local"
        # (Linux and 'local' method only) override arguments for the linux .run installer. For example if you don't want samples use ["--toolkit"] double quotes required!
        linux-local-args: '["--toolkit"]'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOptiX_INSTALL_DIR=${{env.OptiX_INSTALL_DIR}}
      
    - name: Build
      run:
        cmake --build ${{}}/build --parallel 4 --config ${{env.BUILD_TYPE}}